on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

env:
  REGISTRY: ghcr.io
  NAMESPACE: charles0891
  IMAGE_NAME: kube-argocd-deploy
  PROJECT_VERSION: 0.0.1-SNAPSHOT
  DOCKER_USER: ${{ github.actor }}
  DOCKER_PASS: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  unit-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Restore Maven cache
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: restore
      - name: Run Unit Tests
        # run: mvn --batch-mode --update-snapshots verify
        run: mvn test verify
      - name: Save Maven cache
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: save
  build:
    needs: unit-test
    runs-on: ubuntu-latest
    outputs:
      project-version-output: ${{ steps.create-project-version.outputs.PROJECT_VERSION_OUTPUT }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - id: create-project-version
        run: |
          FULL_SHA=${{ github.sha }}
          SHORT_SHA=${FULL_SHA:0:7}
          echo "PROJECT_VERSION=${SHORT_SHA}-${{ github.run_number }}" >> "$GITHUB_ENV"
          echo "PROJECT_VERSION_OUTPUT=${SHORT_SHA}-${{ github.run_number }}" >> "$GITHUB_OUTPUT"

      - name: Restore Maven cache
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: restore
      - name: Build with Maven
        run: ./mvnw package

      - name: Log in to the Container registry
        uses: docker/login-action@v3.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_USER }}
          password: ${{ env.DOCKER_PASS }}

      - name: Build Docker image
        run: docker build -f src/main/docker/Dockerfile.jvm -t ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{env.PROJECT_VERSION}} .
#        run: |
#          docker buildx create --use
#          docker buildx inspect default --bootstrap
#          docker buildx build -f src/main/docker/Dockerfile.jvm -t ${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{env.PROJECT_VERSION}} --load .

      - name: Display Docker images
        run: docker image ls

      - name: Push to packages
        run: docker push ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{env.PROJECT_VERSION}}

      - name: Update manifest file
        run: |
          # Assuming you have a manifest file named k8s.yaml
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          yq eval '.spec.template.spec.containers[0].image = "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{env.PROJECT_VERSION}}"' -i deployments/deployment.yml

          git add .
          git commit -m "updating newer image"
          git push --set-upstream origin main

#  update-image-tag-manifest:
#    needs: [build]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Update Manifest file
#        run: |
#          # Assuming you have a manifest file named k8s.yaml
#          git config user.name "${{ github.actor }}"
#          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
#          git remote set-url origin https://x-access-token:${env.DOCKER_PASS}@github.com/${github.repository_owner}/kube-argocd-deploy.git
#          yq eval '.spec.template.spec.containers[0].image = "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{needs.build.outputs.project-version-output}}"' -i deployments/deployment.yml
#
#          git add .
#          git commit -m "updating newer image"
#          git push --set-upstream origin main
      

#      - name: Update manifest file
#        uses: actions/checkout@v4
#        with:
#          token: ${{ env.DOCKER_USER }}
#        run: |
#        # Assuming you have a manifest file named k8s.yaml
#         git config user.name "${{ github.actor }}"
#         git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
#         yq eval '.spec.template.spec.containers[0].image = "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{env.PROJECT_VERSION}}"' -i deployments/deployment.yml
#
#         git add .
#         git commit -m "updating newer image"
#         git push --set-upstream origin main